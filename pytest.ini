[pytest]
# Set test paths to look for tests
testpaths = tests

# Set asyncio mode to auto for pytest-asyncio
# This runs all async tests in their own event loop.
asyncio_mode = auto

# Add default options
# -v for verbose output
# --cov for coverage (specify modules to cover)
# --cov-report for coverage report format
addopts = -v --cov=. --cov-report=term-missing --cov-report=xml

# Ignore warnings - useful for cleaner test output, but use with caution
# filterwarnings =
#     ignore::DeprecationWarning

# You can define custom markers here if needed
# markers =
#     slow: marks tests as slow to run
#     integration: marks integration tests

# Specify the minimum pytest version, if necessary
# minversion = 6.0

# Exclude directories from test collection if needed
norecursedirs = .git .venv venv env .* CVS *.egg-info dist build

# Python files to be considered as test modules
python_files = test_*.py tests_*.py *_test.py *_tests.py

# Python classes to be considered as test suites
python_classes = Test* Tests*

# Python functions to be considered as tests
python_functions = test_*

# Coverage configuration
[coverage:run]
source =
    config_management
    crypto_trading.database # Assuming this might be tested directly or indirectly
    notification_service
    trading_service
omit =
    */__main__.py # Often not testable in the same way
    */*/*/models.py # Pydantic models are often data structures, less logic to test directly unless they have validators
    # alembic/* # Alembic scripts are typically tested by running migrations
    # tests/* # Don't include tests in their own coverage report
    # crypto_trading/config.py # Old config, mostly refactored

[coverage:report]
# Fail if coverage drops below a certain percentage
# fail_under = 80
show_missing = True
skip_covered = True
# Output formats
# term-missing - prints lines missing coverage to terminal
# xml - for CI systems like Jenkins/GitLab CI
# html - for a browseable report
# Available formats: term, term-missing, annotate, html, xml, json

[coverage:paths]
source =
    src # Example if your source code is in a src/ directory
    .   # Current directory (project root)

# Note: Some paths in coverage:run (source, omit) might need adjustment
# based on the exact project structure and what you want to measure coverage on.
# The model files (`*/*/*/models.py`) are omitted as an example; you might want to cover Pydantic validators if they exist.
# `crypto_trading.database` is included as an example if direct tests for DB operations are written.
# `crypto_trading.config` is omitted as it's largely refactored.
# Adjust these settings as the project evolves.
